var N=null,E="",T="t",U="u",searchIndex={};
var R=["swarm_it","payload","option","position","get_position","Returns current carrier position","carrier","result","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","swarm_it::position","slotkind","formatter","SlotKind","Position"];

searchIndex[R[0]]={"doc":E,"i":[[3,"Carrier",R[0],"Represnets the `Carrier` object. Carrier is an entity that…",N,N],[3,"Payload",E,E,N,N],[12,"cargo",E,E,0,N],[12,"taken_from",E,E,0,N],[3,"Slot",E,"Represnets the `Slot` object. Slots have their target…",N,N],[3,"Swarm",E,E,N,N],[4,"State",E,"States that apply to Carriers",N,N],[13,"IDLE",E,E,1,N],[13,"TARGETING",E,E,1,N],[13,"MOVING",E,E,1,N],[13,"PICKINGUP",E,E,1,N],[13,"LOOKINGFORTARGET",E,E,1,N],[13,"NOTARGET",E,E,1,N],[13,"DELIVERING",E,E,1,N],[13,"PUTTINGDOWN",E,E,1,N],[13,"_DEBUG_",E,E,1,N],[4,R[19],E,"Library supports different kind of slots",N,N],[13,"CLASSIC",E,E,2,N],[13,"PIT",E,E,2,N],[13,"SPAWNER",E,E,2,N],[11,"new",E,"Creates new Carrier at the position specified",3,[[["f64"]],[R[6]]]],[11,"get_payload",E,"Returns current payload of the carrier",3,[[["self"]],[[R[1]],[R[2],[R[1]]]]]],[11,"get_target",E,"Returns index of the slot that carriers is going to",3,[[["self"]],[[R[2],["usize"]],["usize"]]]],[11,R[4],E,R[5],3,[[["self"]],[R[3]]]],[11,"get_angle",E,"Returns current carrier angle",3,[[["self"]],["f64"]]],[11,"get_state",E,"Returns current carrier state",3,[[["self"]],["state"]]],[11,"new",E,E,0,[[[T]],[R[1]]]],[0,R[3],E,E,N,N],[3,R[20],R[16],E,N,N],[12,"x",E,E,4,N],[12,"y",E,E,4,N],[11,"new",E,E,4,[[["f64"]],[R[3]]]],[11,"new",R[0],"Creates new Slot at the position specified and with the…",5,[[[R[1]],[R[17]],["f64"],[R[2],[R[1]]]],["slot"]]],[11,R[4],E,R[5],5,[[["self"]],[R[3]]]],[11,"get_payloads",E,"Returns current carrier payloads. arr[0] - current payload…",5,[[["self"]]]],[11,"set_target_payload",E,"Sets target payload",5,[[[R[1]],["self"],[R[2],[R[1]]]]]],[11,"set_payloads",E,"Sets both current and target payloads",5,[[[R[1]],["self"],[R[2],[R[1]]]]]],[11,"is_taken_care_of",E,"Returns `true` if this slot is already addressed by any of…",5,[[["self"]],["bool"]]],[11,"is_pit",E,"Returns `true` is slot is a pit",5,[[["self"]],["bool"]]],[11,"is_spawner",E,"Returns `true` is slot is a spawner",5,[[["self"]],["bool"]]],[11,"new",E,"Constructs a new `Swarm`.",6,[[],["swarm"]]],[11,"add_carrier",E,"Adds new carrier",6,[[["self"],[R[6]]]]],[11,"add_slot",E,"Adds new slot",6,[[["slot"],["self"]]]],[11,"get_carriers",E,"Returns all carriers",6,[[["self"]],["vec"]]],[11,"get_slots",E,"Returns all slots",6,[[["self"]],["vec"]]],[11,"get_slots_mut",E,"Returns all slots (To be deprecated)",6,[[["self"]],["vec"]]],[11,"tick",E,"The engine must be regularly ticked by the outside world…",6,[[["self"]],["bool"]]],[11,"slot_data_changed",E,"Initiates some precalculation in order for the carriers to…",6,[[["self"]]]],[14,"make_slot_pit",E,E,N,N],[14,"make_slot_spawner",E,E,N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[[T],["self"]]]],[11,R[10],E,E,3,[[[U]],[R[7]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[R[15]]]],[11,R[11],E,E,3,[[["self"]],[T]]],[11,R[12],E,E,3,[[],[R[7]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[[T],["self"]]]],[11,R[10],E,E,0,[[[U]],[R[7]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[R[15]]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[],[R[7]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[[T],["self"]]]],[11,R[10],E,E,5,[[[U]],[R[7]]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[R[15]]]],[11,R[11],E,E,5,[[["self"]],[T]]],[11,R[12],E,E,5,[[],[R[7]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[10],E,E,6,[[[U]],[R[7]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[15]]]],[11,R[11],E,E,6,[[["self"]],[T]]],[11,R[12],E,E,6,[[],[R[7]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[[T],["self"]]]],[11,R[10],E,E,1,[[[U]],[R[7]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[R[15]]]],[11,R[11],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[],[R[7]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[[T],["self"]]]],[11,R[10],E,E,2,[[[U]],[R[7]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[15]]]],[11,R[11],E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[],[R[7]]]],[11,"from",R[16],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[[T],["self"]]]],[11,R[10],E,E,4,[[[U]],[R[7]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[15]]]],[11,R[11],E,E,4,[[["self"]],[T]]],[11,R[12],E,E,4,[[],[R[7]]]],[11,"eq",R[0],E,1,[[["state"],["self"]],["bool"]]],[11,"ne",E,E,1,[[["state"],["self"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,2,[[[R[17]],["self"]],["bool"]]],[11,"clone",E,E,1,[[["self"]],["state"]]],[11,"clone",E,E,3,[[["self"]],[R[6]]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"clone",R[16],E,4,[[["self"]],[R[3]]]],[11,"clone",R[0],E,2,[[["self"]],[R[17]]]],[11,"clone",E,E,5,[[["self"]],["slot"]]],[11,"default",E,E,6,[[],["swarm"]]],[11,"fmt",E,E,1,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,0,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",R[16],E,4,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",R[0],E,2,[[["self"],[R[18]]],[R[7]]]],[11,"fmt",E,E,5,[[["self"],[R[18]]],[R[7]]]]],"p":[[3,"Payload"],[4,"State"],[4,R[19]],[3,"Carrier"],[3,R[20]],[3,"Slot"],[3,"Swarm"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);